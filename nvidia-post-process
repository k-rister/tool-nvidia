#!/usr/bin/env python3
# -*- mode: python; indent-tabs-mode: nil; python-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

import sys
import os
import lzma
import re
import copy
import math
import json
import yaml
import argparse
import glob
from datetime import datetime
from pathlib import Path

TOOLBOX_HOME = os.environ.get('TOOLBOX_HOME')
if TOOLBOX_HOME is None:
    print("This script requires libraries that are provided by the toolbox project.")
    print("Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and")
    print("then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.")
    exit(1)
else:
    p = Path(TOOLBOX_HOME) / 'python'
    if not p.exists() or not p.is_dir():
        print("ERROR: <TOOLBOX_HOME>/python ('%s') does not exist!" % (p))
        exit(2)
    sys.path.append(str(p))
from toolbox.metrics import log_sample
from toolbox.metrics import finish_samples

def main():
    print('nvidia-post-process-smi')
    # Made for the file conntrack-stats-show.txt.xz
    # #Date        Time         gpu    pwr  gtemp  mtemp     sm    mem    enc    dec    jpg    ofa   mclk   pclk     mig_id      gi_id      ci_id    intutil     mmaact
    # #YYYYMMDD    HH:MM:SS     Idx      W      C      C      %      %      %      %      %      %    MHz    MHz        Idx        Idx        Idx      GPM:%      GPM:%
    # 20241120    19:14:24       0     34     34     35      0      0      0      0      0      0   1215    210          -          -          -          -          -
    # 20241120    19:14:24       1     38     36     37      0      0      0      0      0      0   1215    210          -          -          -          0          0
    # 20241120    19:14:27       0     34     34     35      0      0      0      0      0      0   1215    210          -          -          -          -          -
    f = 'nvidia-smi.txt.xz'
    with lzma.open(f, 'rt') as file:
        desc_tput = {'source': 'nvidia-smi', 'type': 'util', 'class': 'throughput'}
        desc_count = {'source': 'nvidia-smi', 'type': 'mclk', 'class': 'count'}
        file_id = '0'
        for line in file:
            print(line)
            if reggy := re.search(r'^\s*(\d{,8}\s+\d{,2}:\d{,2}:\d{,2})\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+).+', line):
                print("matched")
                end_dt = reggy.group(1)
                names = {'id': reggy.group(2)}
                values = {
                    'pwr': reggy.group(3),
                    'gtemp': reggy.group(4),
                    'mtemp': reggy.group(5),
                    'util': reggy.group(6),
                    'mem': reggy.group(7) }
                dt = datetime.strptime(end_dt, '%Y%m%d %X')
                end_ts = int(math.floor(dt.timestamp() * 1000))
                for this_type in ('pwr', 'util', 'mem', 'gtemp', 'mtemp'):
                    sample = {'end': end_ts, 'value': values[this_type]}
                    if this_type in ('gtemp', 'mtemp'):
                        this_class = 'count'
                    else:
                        this_class = 'throughput'
                    this_desc = {'source': 'nvidia-smi', 'type': this_type, 'class': this_class}
                    log_sample(file_id, this_desc, names, sample)
            else:
                print("NO MATCH")
    file.close
    finish_samples()
    return(0)

if __name__ == "__main__":
    exit(main())
